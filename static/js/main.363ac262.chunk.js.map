{"version":3,"sources":["context/colorContext.js","component/ToggleSwitchComponent.js","App.js","reportWebVitals.js","index.js"],"names":["ColorContext","React","createContext","name","ToggleSwitchComponent","useContext","isColor","setIsColor","useState","rangeValue","setRangeValue","changeRangeValue","event","target","value","console","log","className","type","id","onChange","htmlFor","onClick","max","min","step","App","Provider","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2OAKeA,G,MAHMC,IAAMC,cAAc,CACrCC,KAAK,S,eCyBMC,EAxBe,WAC1B,MAA8BC,qBAAWL,GAAlCM,EAAP,EAAOA,QAASC,EAAhB,EAAgBA,WAChB,EAAoCC,mBAAS,UAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAMMC,EAAmB,SAACC,GACtBF,EAAcE,EAAMC,OAAOC,QAG/B,OADAC,QAAQC,IAAIP,EAAY,cAEpB,sBAAKQ,UAAS,UAAKX,EAAU,aAAe,cAA5C,0BAEI,uBAAOY,KAAK,WAAWC,GAAG,SAASC,SAXhB,WACvBb,GAAYD,MAWR,uBAAOe,QAAQ,WAChB,wBAAQC,QAASX,EAAjB,oBACC,uBAAOQ,GAAG,UAAUD,KAAK,QAAQE,SAAUT,EAAkBY,IAAK,IAAKC,IAAK,EAAGC,KAAK,IAAIX,MAAOL,IACnG,iCAAOA,EAAP,aCPOiB,MAZf,WACE,MAA8BlB,oBAAS,GAAvC,mBAAOF,EAAP,KAAgBC,EAAhB,KAEA,OACE,qBAAKU,UAAU,MAAf,SACA,cAAC,EAAaU,SAAd,CAAuBb,MAAO,CAACR,UAASC,cAAxC,SACK,cAAC,EAAD,SCEMqB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.363ac262.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst ColorContext = React.createContext({\r\n    name:'ami'\r\n});\r\nexport default ColorContext;","import {useContext, useState} from \"react\";\r\nimport ColorContext from \"../context/colorContext\";\r\nimport './toggleStyle.css';\r\n\r\nconst ToggleSwitchComponent = ()=> {\r\n    const {isColor, setIsColor} = useContext(ColorContext);\r\n    const [rangeValue, setRangeValue] = useState('number')\r\n\r\n    const changeContextValue = ()=> {\r\n        setIsColor(!isColor)\r\n    }\r\n\r\n    const changeRangeValue = (event)=> {\r\n        setRangeValue(event.target.value)\r\n    }\r\n    console.log(rangeValue, 'rangeValue')\r\n    return(\r\n        <div className={`${isColor ? 'darck-back' : 'light-back'}`} >\r\n            Toggle Switch\r\n            <input type=\"checkbox\" id=\"switch\" onChange={changeContextValue}/>\r\n            <label htmlFor=\"switch\"></label>\r\n           <button onClick={changeRangeValue}>change</button>\r\n            <input id=\"typeinp\" type='range' onChange={changeRangeValue} max={100} min={3} step='1' value={rangeValue}/>\r\n        <span>{rangeValue} $ </span>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ToggleSwitchComponent;","import './App.css';\nimport ToggleSwitchComponent from \"./component/ToggleSwitchComponent\";\nimport ColorContext from '../src/context/colorContext'\nimport {useState} from \"react\";\nfunction App() {\n  const [isColor, setIsColor] = useState(false);\n\n  return (\n    <div className=\"App\">\n    <ColorContext.Provider value={{isColor, setIsColor}}>\n         <ToggleSwitchComponent/>\n      </ColorContext.Provider>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}